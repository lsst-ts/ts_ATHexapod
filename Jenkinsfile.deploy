pipeline {
    agent any
    environment {
        registryCredential = "dockerhub-lssttsadmin"
        nexusRegistryCredential = "nexus3-lsst_jenkins"

        dockerImageNameMaster = "lsstts/ts_athexapod:master"
        dockerImageNameDevelop = "lsstts/ts_athexapod:develop"
        dockerImageNameBuild = "lsstts/ts_athexapod:b${BUILD_NUMBER}"

        dockerImageMaster = ""
        dockerImageDevelop = ""
        dockerImageBuild = ""
    }    
    parameters {
        booleanParam defaultValue: false, description: "Option to build the master/release branch.", name: 'build_master'
        booleanParam defaultValue: false, description: "Option to build the develop branch.", name: 'build_develop'
        booleanParam defaultValue: false, description: "Option to push the build image to the Nexus3 / Docker Hub registries.", name: 'push_tag'
        string defaultValue: "salobj_5.15.2", description: "Build number for the lsstts/deploy-env docker image.", name: 'deploy_env_tag', trim: true
        string defaultValue: "1.2.2_4.1.1_6.0.0", description: "IDL version.", name: 'idl_v', trim: true
        string defaultValue: "v0.4.1rc1", description: "ATHexapod version.", name: 'athexapod_csc_v', trim: true
        string defaultValue: "master", description: "ATTCS configuration version.", name: 'attcs_config_v', trim: true
    }
    stages {
        stage("Create docker network.") {
            steps {
                script {
                    sh """
                    docker network create net_b${BUILD_NUMBER} || echo Network exists...
                    """ 
                }
            }

        }    
        stage("Build Docker image (master)") {
            when {
                expression { return env.build_master.toBoolean() }
            }
            steps {
                script {
                    dockerImageMaster = docker.build(dockerImageNameMaster, "--no-cache --network net_b${BUILD_NUMBER} --build-arg deploy_env_tag=${env.deploy_env_tag} --build-arg idl_conda_version=${env.idl_v} --build-arg athexapod_conda_version=${env.athexapod_csc_v} --build-arg attcs_config_branch=master ./docker/")
                }
            }
        }
        stage("Build Docker image (develop)") {
            when {
                expression { return env.build_develop.toBoolean() }
            }
            steps {
                script {
                    dockerImageDevelop = docker.build(dockerImageNameDevelop, "--no-cache --network net_b${BUILD_NUMBER} --build-arg deploy_env_tag=${env.deploy_env_tag} --build-arg idl_conda_version=${env.idl_v}--build-arg athexapod_conda_version=${env.athexapod_csc_v} --build-arg attcs_config_branch=develop ./docker/")
                }
            }
        }
        stage("Build Docker image (tag/branch)") {
            when {
                not{
                    anyOf {
                        expression { return env.build_develop.toBoolean() }
                        expression { return env.build_master.toBoolean() }
                    }
                }
            }
            steps {
                script {
                    dockerImageBuild = docker.build(dockerImageNameBuild, "--no-cache --network net_b${BUILD_NUMBER} --build-arg deploy_env_tag=${env.deploy_env_tag} --build-arg idl_conda_version=${env.idl_v} --build-arg athexapod_conda_version=${env.athexapod_csc_v} --build-arg attcs_config_branch=${env.attcs_config_v} ./docker/")
                }
            }
        }

        stage("Push Docker image (master)") {
            when {
                expression { return env.build_master.toBoolean() }
            }
            steps {
                script {
                    docker.withRegistry("", registryCredential) {
                    dockerImageMaster.push()
                    }
                    docker.withRegistry("https://ts-dockerhub.lsst.org/", nexusRegistryCredential) {
                        sh script: """
                            docker tag ${dockerImageNameMaster} ts-dockerhub.lsst.org/${dockerImageNameMaster}
                            docker push ts-dockerhub.lsst.org/${dockerImageNameMaster}
                        """
                    }
                }
            }
        }
        stage("Push Docker image (develop)") {
            when {
                expression { return env.build_develop.toBoolean() }
            }
            steps {
                script {
                    docker.withRegistry("", registryCredential) {
                        dockerImageDevelop.push()
                    }
                    docker.withRegistry("https://ts-dockerhub.lsst.org/", nexusRegistryCredential) {
                        sh script: """
                            docker tag ${dockerImageNameDevelop} ts-dockerhub.lsst.org/${dockerImageNameDevelop}
                            docker push ts-dockerhub.lsst.org/${dockerImageNameDevelop}
                        """
                    }
                }
            }
        }
        stage("Push Docker image (tag/branch)") {
            when {
                allOf {
                    expression { return env.push_tag.toBoolean() }
                    not{
                        anyOf {
                            expression { return env.build_develop.toBoolean() }
                            expression { return env.build_master.toBoolean() }
                        }
                    }
                }
            }
            steps {
                script {
                    docker.withRegistry("", registryCredential) {
                        dockerImageBuild.push()
                    }
                    docker.withRegistry("https://ts-dockerhub.lsst.org/", nexusRegistryCredential) {
                        sh script: """
                            docker tag ${dockerImageNameBuild} ts-dockerhub.lsst.org/${dockerImageNameBuild}
                            docker push ts-dockerhub.lsst.org/${dockerImageNameBuild}
                        """
                    }
                }
            }
        }        
    }
    post {
        cleanup {
            sh "docker network rm net_b${BUILD_NUMBER}"
        }
    }
}